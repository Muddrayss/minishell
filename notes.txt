
RAW COMMAND:

"infile < wc -l 3> outfile3.txt 1> outfile1.txt >> outfile.txt"


LEXERED COMMAND:

"infile "
REDIR_L
" wc -l 3"
REDIR_R
" outfile3.txt 1"
REDIR_R
" outfile1.txt "
REDIR_R
REDIR_R
" outfile.txt"


PARSED COMMAND:

"'-42' wc -l '-42' outfile3.txt '-42' outfile1.txt '42' outfile.txt"
REDIR_INPUT-->REDIR_OUTPUT_DUP-->REDIR_OUTPUT_DUP-->REDIR_APPEND


casi input:

- (<< limiter cmd)
- (infile < cmd)
- (cmd <&n)             prende come input al comando il fd numero n

casi extra:

- (n< infile)           apre infile sul fd n per un utilizzo futuro
- (n<&-)                chiude il fd numero n
- (n> outfile)			redirige l'output che andrebbe sull FD 3 nell outfile
- (<> outfile)          apre outfile sia per read che per write
- (3<>outfile)          apre outfile sia per read che per write sul FD 3

casi output:

- (cmd > outfile)
- (cmd >> outfile)
- (cmd >&n)             scrive l'output sul fd n    
- (cmd >>&n)            appende l'output sul fd n

casi strani:

- (> outfile)           crea o ricrea (sovrascrivendo) il file outfile

- (> outfile)           crea un here_doc fino al ctrl+D e mette il contenuto dentro out (COMPORTAMENTO NON STANDARD)
- (> outfile cmd)       scrive l'output del comando sull'outfile (COMPORTAMENTO NON STANDARD)

il parser si puo accorgere di questi casi specifici perche' la stringa dopo il '>' mantiene o meno gli spazi/tabs